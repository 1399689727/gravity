// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protocol/msgpb/message.proto

/*
	Package msgpb is a generated protocol buffer package.

	It is generated from these files:
		protocol/msgpb/message.proto

	It has these top-level messages:
		Position
		Msg
		DMLMsg
		DDLMsg
		MySQLColumnValue
		MySQLColumnData
*/
package msgpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MsgType int32

const (
	MsgType_UNKNOWN_MSG MsgType = 0
	// below are DmlMsg types
	MsgType_CREATE MsgType = 1
	MsgType_UPDATE MsgType = 2
	MsgType_DELETE MsgType = 3
	// below are DdlMsg types
	MsgType_CREATE_DATABASE MsgType = 4
	MsgType_DROP_DATABASE   MsgType = 5
	MsgType_CREATE_TABLE    MsgType = 6
	MsgType_DROP_TABLE      MsgType = 7
	MsgType_ALTER_TABLE     MsgType = 8
	MsgType_TRUNCATE_TABLE  MsgType = 9
	MsgType_RENAME_TABLE    MsgType = 10
	MsgType_CREATE_INDEX    MsgType = 11
	MsgType_DROP_INDEX      MsgType = 12
	MsgType_GENERAL_DDL     MsgType = 13
)

var MsgType_name = map[int32]string{
	0:  "UNKNOWN_MSG",
	1:  "CREATE",
	2:  "UPDATE",
	3:  "DELETE",
	4:  "CREATE_DATABASE",
	5:  "DROP_DATABASE",
	6:  "CREATE_TABLE",
	7:  "DROP_TABLE",
	8:  "ALTER_TABLE",
	9:  "TRUNCATE_TABLE",
	10: "RENAME_TABLE",
	11: "CREATE_INDEX",
	12: "DROP_INDEX",
	13: "GENERAL_DDL",
}
var MsgType_value = map[string]int32{
	"UNKNOWN_MSG":     0,
	"CREATE":          1,
	"UPDATE":          2,
	"DELETE":          3,
	"CREATE_DATABASE": 4,
	"DROP_DATABASE":   5,
	"CREATE_TABLE":    6,
	"DROP_TABLE":      7,
	"ALTER_TABLE":     8,
	"TRUNCATE_TABLE":  9,
	"RENAME_TABLE":    10,
	"CREATE_INDEX":    11,
	"DROP_INDEX":      12,
	"GENERAL_DDL":     13,
}

func (x MsgType) String() string {
	return proto.EnumName(MsgType_name, int32(x))
}
func (MsgType) EnumDescriptor() ([]byte, []int) { return fileDescriptorMessage, []int{0} }

type DataSourceType int32

const (
	DataSourceType_UNKNOWN_DATA_SOURCE DataSourceType = 0
	DataSourceType_MYSQL               DataSourceType = 1
	DataSourceType_MONGODB             DataSourceType = 2
	DataSourceType_TIDB                DataSourceType = 3
	DataSourceType_REDIS               DataSourceType = 4
	DataSourceType_CODIS               DataSourceType = 5
)

var DataSourceType_name = map[int32]string{
	0: "UNKNOWN_DATA_SOURCE",
	1: "MYSQL",
	2: "MONGODB",
	3: "TIDB",
	4: "REDIS",
	5: "CODIS",
}
var DataSourceType_value = map[string]int32{
	"UNKNOWN_DATA_SOURCE": 0,
	"MYSQL":               1,
	"MONGODB":             2,
	"TIDB":                3,
	"REDIS":               4,
	"CODIS":               5,
}

func (x DataSourceType) String() string {
	return proto.EnumName(DataSourceType_name, int32(x))
}
func (DataSourceType) EnumDescriptor() ([]byte, []int) { return fileDescriptorMessage, []int{1} }

type MySQLColumnType int32

const (
	MySQLColumnType_UNKNOWN   MySQLColumnType = 0
	MySQLColumnType_INT64     MySQLColumnType = 1
	MySQLColumnType_FLOAT64   MySQLColumnType = 2
	MySQLColumnType_BOOL      MySQLColumnType = 3
	MySQLColumnType_BYTES     MySQLColumnType = 4
	MySQLColumnType_STRING    MySQLColumnType = 5
	MySQLColumnType_TIMESTAMP MySQLColumnType = 6
	MySQLColumnType_DATETIME  MySQLColumnType = 7
	MySQLColumnType_UINT64    MySQLColumnType = 8
)

var MySQLColumnType_name = map[int32]string{
	0: "UNKNOWN",
	1: "INT64",
	2: "FLOAT64",
	3: "BOOL",
	4: "BYTES",
	5: "STRING",
	6: "TIMESTAMP",
	7: "DATETIME",
	8: "UINT64",
}
var MySQLColumnType_value = map[string]int32{
	"UNKNOWN":   0,
	"INT64":     1,
	"FLOAT64":   2,
	"BOOL":      3,
	"BYTES":     4,
	"STRING":    5,
	"TIMESTAMP": 6,
	"DATETIME":  7,
	"UINT64":    8,
}

func (x MySQLColumnType) String() string {
	return proto.EnumName(MySQLColumnType_name, int32(x))
}
func (MySQLColumnType) EnumDescriptor() ([]byte, []int) { return fileDescriptorMessage, []int{2} }

// Position is binlog-file + binlog-position + gtidset for MySQL
// and is the timestamp for mongo
type Position struct {
	BinlogFile     string `protobuf:"bytes,1,opt,name=binlogFile,proto3" json:"binlogFile,omitempty"`
	BinlogPosition int32  `protobuf:"varint,2,opt,name=binlogPosition,proto3" json:"binlogPosition,omitempty"`
	BinlogGTIDSet  string `protobuf:"bytes,3,opt,name=binlogGTIDSet,proto3" json:"binlogGTIDSet,omitempty"`
	MongoTimestamp int64  `protobuf:"varint,4,opt,name=mongoTimestamp,proto3" json:"mongoTimestamp,omitempty"`
}

func (m *Position) Reset()                    { *m = Position{} }
func (m *Position) String() string            { return proto.CompactTextString(m) }
func (*Position) ProtoMessage()               {}
func (*Position) Descriptor() ([]byte, []int) { return fileDescriptorMessage, []int{0} }

func (m *Position) GetBinlogFile() string {
	if m != nil {
		return m.BinlogFile
	}
	return ""
}

func (m *Position) GetBinlogPosition() int32 {
	if m != nil {
		return m.BinlogPosition
	}
	return 0
}

func (m *Position) GetBinlogGTIDSet() string {
	if m != nil {
		return m.BinlogGTIDSet
	}
	return ""
}

func (m *Position) GetMongoTimestamp() int64 {
	if m != nil {
		return m.MongoTimestamp
	}
	return 0
}

type Msg struct {
	// Version is the Msg definition version
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// Database is the database/schema name for MySQL
	// is the database for Mongo
	Database string `protobuf:"bytes,2,opt,name=database,proto3" json:"database,omitempty"`
	// Table is the table name for MySQL
	// is the collection name for Mongo
	Table string `protobuf:"bytes,3,opt,name=table,proto3" json:"table,omitempty"`
	// MsgType is the message type
	MsgType MsgType `protobuf:"varint,4,opt,name=msgType,proto3,enum=msgpb.MsgType" json:"msgType,omitempty"`
	// Timestamp is the binlog event header timestamp for MySQL
	// It is to be decided for Mongo
	Timestamp int64 `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Position is the GTID Set for MySQL
	// and is timestamp? for Mongo
	Position *Position `protobuf:"bytes,6,opt,name=position" json:"position,omitempty"`
	// GravityID is the gravity server id
	GravityID int32 `protobuf:"varint,7,opt,name=gravityID,proto3" json:"gravityID,omitempty"`
	// UniqueSourceName is the Unique Name of the data source
	UniqueSourceName string `protobuf:"bytes,8,opt,name=uniqueSourceName,proto3" json:"uniqueSourceName,omitempty"`
	// SourceType is the database type of the data source
	SourceType DataSourceType `protobuf:"varint,9,opt,name=sourceType,proto3,enum=msgpb.DataSourceType" json:"sourceType,omitempty"`
	// TimeZone is the Time zone of the data source
	TimeZone string `protobuf:"bytes,10,opt,name=timeZone,proto3" json:"timeZone,omitempty"`
	// Host is the Host name or IP address of the data source
	Host                 string  `protobuf:"bytes,11,opt,name=host,proto3" json:"host,omitempty"`
	DmlMsg               *DMLMsg `protobuf:"bytes,12,opt,name=dmlMsg" json:"dmlMsg,omitempty"`
	DdlMsg               *DDLMsg `protobuf:"bytes,13,opt,name=ddlMsg" json:"ddlMsg,omitempty"`
	GravitySentTimestamp string  `protobuf:"bytes,14,opt,name=gravitySentTimestamp,proto3" json:"gravitySentTimestamp,omitempty"`
}

func (m *Msg) Reset()                    { *m = Msg{} }
func (m *Msg) String() string            { return proto.CompactTextString(m) }
func (*Msg) ProtoMessage()               {}
func (*Msg) Descriptor() ([]byte, []int) { return fileDescriptorMessage, []int{1} }

func (m *Msg) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Msg) GetDatabase() string {
	if m != nil {
		return m.Database
	}
	return ""
}

func (m *Msg) GetTable() string {
	if m != nil {
		return m.Table
	}
	return ""
}

func (m *Msg) GetMsgType() MsgType {
	if m != nil {
		return m.MsgType
	}
	return MsgType_UNKNOWN_MSG
}

func (m *Msg) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Msg) GetPosition() *Position {
	if m != nil {
		return m.Position
	}
	return nil
}

func (m *Msg) GetGravityID() int32 {
	if m != nil {
		return m.GravityID
	}
	return 0
}

func (m *Msg) GetUniqueSourceName() string {
	if m != nil {
		return m.UniqueSourceName
	}
	return ""
}

func (m *Msg) GetSourceType() DataSourceType {
	if m != nil {
		return m.SourceType
	}
	return DataSourceType_UNKNOWN_DATA_SOURCE
}

func (m *Msg) GetTimeZone() string {
	if m != nil {
		return m.TimeZone
	}
	return ""
}

func (m *Msg) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *Msg) GetDmlMsg() *DMLMsg {
	if m != nil {
		return m.DmlMsg
	}
	return nil
}

func (m *Msg) GetDdlMsg() *DDLMsg {
	if m != nil {
		return m.DdlMsg
	}
	return nil
}

func (m *Msg) GetGravitySentTimestamp() string {
	if m != nil {
		return m.GravitySentTimestamp
	}
	return ""
}

type DMLMsg struct {
	// Data is the changed data
	Data map[string]*MySQLColumnData `protobuf:"bytes,2,rep,name=data" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	// Old is the original data (if it is not empty)
	Old map[string]*MySQLColumnData `protobuf:"bytes,3,rep,name=old" json:"old,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	// Pks is the pkColumnName -> pkColumnValue mapping,
	Pks            map[string]*MySQLColumnData `protobuf:"bytes,4,rep,name=pks" json:"pks,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	MongoBsonBytes map[string][]byte           `protobuf:"bytes,5,rep,name=mongoBsonBytes" json:"mongoBsonBytes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *DMLMsg) Reset()                    { *m = DMLMsg{} }
func (m *DMLMsg) String() string            { return proto.CompactTextString(m) }
func (*DMLMsg) ProtoMessage()               {}
func (*DMLMsg) Descriptor() ([]byte, []int) { return fileDescriptorMessage, []int{2} }

func (m *DMLMsg) GetData() map[string]*MySQLColumnData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *DMLMsg) GetOld() map[string]*MySQLColumnData {
	if m != nil {
		return m.Old
	}
	return nil
}

func (m *DMLMsg) GetPks() map[string]*MySQLColumnData {
	if m != nil {
		return m.Pks
	}
	return nil
}

func (m *DMLMsg) GetMongoBsonBytes() map[string][]byte {
	if m != nil {
		return m.MongoBsonBytes
	}
	return nil
}

// DDLMsg is not available for Mongo?
type DDLMsg struct {
	// The DdlMsg SQL
	SQL string `protobuf:"bytes,2,opt,name=SQL,proto3" json:"SQL,omitempty"`
}

func (m *DDLMsg) Reset()                    { *m = DDLMsg{} }
func (m *DDLMsg) String() string            { return proto.CompactTextString(m) }
func (*DDLMsg) ProtoMessage()               {}
func (*DDLMsg) Descriptor() ([]byte, []int) { return fileDescriptorMessage, []int{3} }

func (m *DDLMsg) GetSQL() string {
	if m != nil {
		return m.SQL
	}
	return ""
}

type MySQLColumnValue struct {
	ValueString string `protobuf:"bytes,1,opt,name=valueString,proto3" json:"valueString,omitempty"`
	IsNull      bool   `protobuf:"varint,2,opt,name=isNull,proto3" json:"isNull,omitempty"`
}

func (m *MySQLColumnValue) Reset()                    { *m = MySQLColumnValue{} }
func (m *MySQLColumnValue) String() string            { return proto.CompactTextString(m) }
func (*MySQLColumnValue) ProtoMessage()               {}
func (*MySQLColumnValue) Descriptor() ([]byte, []int) { return fileDescriptorMessage, []int{4} }

func (m *MySQLColumnValue) GetValueString() string {
	if m != nil {
		return m.ValueString
	}
	return ""
}

func (m *MySQLColumnValue) GetIsNull() bool {
	if m != nil {
		return m.IsNull
	}
	return false
}

type MySQLColumnData struct {
	ColumnType   MySQLColumnType   `protobuf:"varint,1,opt,name=columnType,proto3,enum=msgpb.MySQLColumnType" json:"columnType,omitempty"`
	Value        *MySQLColumnValue `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	DefaultValue *MySQLColumnValue `protobuf:"bytes,3,opt,name=defaultValue" json:"defaultValue,omitempty"`
}

func (m *MySQLColumnData) Reset()                    { *m = MySQLColumnData{} }
func (m *MySQLColumnData) String() string            { return proto.CompactTextString(m) }
func (*MySQLColumnData) ProtoMessage()               {}
func (*MySQLColumnData) Descriptor() ([]byte, []int) { return fileDescriptorMessage, []int{5} }

func (m *MySQLColumnData) GetColumnType() MySQLColumnType {
	if m != nil {
		return m.ColumnType
	}
	return MySQLColumnType_UNKNOWN
}

func (m *MySQLColumnData) GetValue() *MySQLColumnValue {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *MySQLColumnData) GetDefaultValue() *MySQLColumnValue {
	if m != nil {
		return m.DefaultValue
	}
	return nil
}

func init() {
	proto.RegisterType((*Position)(nil), "msgpb.Position")
	proto.RegisterType((*Msg)(nil), "msgpb.Msg")
	proto.RegisterType((*DMLMsg)(nil), "msgpb.DMLMsg")
	proto.RegisterType((*DDLMsg)(nil), "msgpb.DDLMsg")
	proto.RegisterType((*MySQLColumnValue)(nil), "msgpb.MySQLColumnValue")
	proto.RegisterType((*MySQLColumnData)(nil), "msgpb.MySQLColumnData")
	proto.RegisterEnum("msgpb.MsgType", MsgType_name, MsgType_value)
	proto.RegisterEnum("msgpb.DataSourceType", DataSourceType_name, DataSourceType_value)
	proto.RegisterEnum("msgpb.MySQLColumnType", MySQLColumnType_name, MySQLColumnType_value)
}
func (m *Position) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Position) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.BinlogFile) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.BinlogFile)))
		i += copy(dAtA[i:], m.BinlogFile)
	}
	if m.BinlogPosition != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.BinlogPosition))
	}
	if len(m.BinlogGTIDSet) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.BinlogGTIDSet)))
		i += copy(dAtA[i:], m.BinlogGTIDSet)
	}
	if m.MongoTimestamp != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.MongoTimestamp))
	}
	return i, nil
}

func (m *Msg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Msg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Version) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Version)))
		i += copy(dAtA[i:], m.Version)
	}
	if len(m.Database) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Database)))
		i += copy(dAtA[i:], m.Database)
	}
	if len(m.Table) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Table)))
		i += copy(dAtA[i:], m.Table)
	}
	if m.MsgType != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.MsgType))
	}
	if m.Timestamp != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.Timestamp))
	}
	if m.Position != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.Position.Size()))
		n1, err := m.Position.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.GravityID != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.GravityID))
	}
	if len(m.UniqueSourceName) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.UniqueSourceName)))
		i += copy(dAtA[i:], m.UniqueSourceName)
	}
	if m.SourceType != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.SourceType))
	}
	if len(m.TimeZone) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.TimeZone)))
		i += copy(dAtA[i:], m.TimeZone)
	}
	if len(m.Host) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Host)))
		i += copy(dAtA[i:], m.Host)
	}
	if m.DmlMsg != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.DmlMsg.Size()))
		n2, err := m.DmlMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.DdlMsg != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.DdlMsg.Size()))
		n3, err := m.DdlMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.GravitySentTimestamp) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.GravitySentTimestamp)))
		i += copy(dAtA[i:], m.GravitySentTimestamp)
	}
	return i, nil
}

func (m *DMLMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DMLMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for k, _ := range m.Data {
			dAtA[i] = 0x12
			i++
			v := m.Data[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovMessage(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovMessage(uint64(len(k))) + msgSize
			i = encodeVarintMessage(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintMessage(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintMessage(dAtA, i, uint64(v.Size()))
				n4, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n4
			}
		}
	}
	if len(m.Old) > 0 {
		for k, _ := range m.Old {
			dAtA[i] = 0x1a
			i++
			v := m.Old[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovMessage(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovMessage(uint64(len(k))) + msgSize
			i = encodeVarintMessage(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintMessage(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintMessage(dAtA, i, uint64(v.Size()))
				n5, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n5
			}
		}
	}
	if len(m.Pks) > 0 {
		for k, _ := range m.Pks {
			dAtA[i] = 0x22
			i++
			v := m.Pks[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovMessage(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovMessage(uint64(len(k))) + msgSize
			i = encodeVarintMessage(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintMessage(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintMessage(dAtA, i, uint64(v.Size()))
				n6, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n6
			}
		}
	}
	if len(m.MongoBsonBytes) > 0 {
		for k, _ := range m.MongoBsonBytes {
			dAtA[i] = 0x2a
			i++
			v := m.MongoBsonBytes[k]
			byteSize := 0
			if len(v) > 0 {
				byteSize = 1 + len(v) + sovMessage(uint64(len(v)))
			}
			mapSize := 1 + len(k) + sovMessage(uint64(len(k))) + byteSize
			i = encodeVarintMessage(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintMessage(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if len(v) > 0 {
				dAtA[i] = 0x12
				i++
				i = encodeVarintMessage(dAtA, i, uint64(len(v)))
				i += copy(dAtA[i:], v)
			}
		}
	}
	return i, nil
}

func (m *DDLMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DDLMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SQL) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.SQL)))
		i += copy(dAtA[i:], m.SQL)
	}
	return i, nil
}

func (m *MySQLColumnValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MySQLColumnValue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ValueString) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.ValueString)))
		i += copy(dAtA[i:], m.ValueString)
	}
	if m.IsNull {
		dAtA[i] = 0x10
		i++
		if m.IsNull {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *MySQLColumnData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MySQLColumnData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ColumnType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.ColumnType))
	}
	if m.Value != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.Value.Size()))
		n7, err := m.Value.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.DefaultValue != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.DefaultValue.Size()))
		n8, err := m.DefaultValue.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Position) Size() (n int) {
	var l int
	_ = l
	l = len(m.BinlogFile)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.BinlogPosition != 0 {
		n += 1 + sovMessage(uint64(m.BinlogPosition))
	}
	l = len(m.BinlogGTIDSet)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.MongoTimestamp != 0 {
		n += 1 + sovMessage(uint64(m.MongoTimestamp))
	}
	return n
}

func (m *Msg) Size() (n int) {
	var l int
	_ = l
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Database)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Table)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.MsgType != 0 {
		n += 1 + sovMessage(uint64(m.MsgType))
	}
	if m.Timestamp != 0 {
		n += 1 + sovMessage(uint64(m.Timestamp))
	}
	if m.Position != nil {
		l = m.Position.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.GravityID != 0 {
		n += 1 + sovMessage(uint64(m.GravityID))
	}
	l = len(m.UniqueSourceName)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.SourceType != 0 {
		n += 1 + sovMessage(uint64(m.SourceType))
	}
	l = len(m.TimeZone)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.DmlMsg != nil {
		l = m.DmlMsg.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.DdlMsg != nil {
		l = m.DdlMsg.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.GravitySentTimestamp)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *DMLMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Data) > 0 {
		for k, v := range m.Data {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovMessage(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovMessage(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovMessage(uint64(mapEntrySize))
		}
	}
	if len(m.Old) > 0 {
		for k, v := range m.Old {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovMessage(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovMessage(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovMessage(uint64(mapEntrySize))
		}
	}
	if len(m.Pks) > 0 {
		for k, v := range m.Pks {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovMessage(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovMessage(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovMessage(uint64(mapEntrySize))
		}
	}
	if len(m.MongoBsonBytes) > 0 {
		for k, v := range m.MongoBsonBytes {
			_ = k
			_ = v
			l = 0
			if len(v) > 0 {
				l = 1 + len(v) + sovMessage(uint64(len(v)))
			}
			mapEntrySize := 1 + len(k) + sovMessage(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovMessage(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *DDLMsg) Size() (n int) {
	var l int
	_ = l
	l = len(m.SQL)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *MySQLColumnValue) Size() (n int) {
	var l int
	_ = l
	l = len(m.ValueString)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.IsNull {
		n += 2
	}
	return n
}

func (m *MySQLColumnData) Size() (n int) {
	var l int
	_ = l
	if m.ColumnType != 0 {
		n += 1 + sovMessage(uint64(m.ColumnType))
	}
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.DefaultValue != nil {
		l = m.DefaultValue.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func sovMessage(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Position) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Position: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Position: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BinlogFile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BinlogFile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BinlogPosition", wireType)
			}
			m.BinlogPosition = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BinlogPosition |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BinlogGTIDSet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BinlogGTIDSet = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MongoTimestamp", wireType)
			}
			m.MongoTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MongoTimestamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Msg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Msg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Msg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Database", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Database = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Table", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Table = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgType", wireType)
			}
			m.MsgType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgType |= (MsgType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Position == nil {
				m.Position = &Position{}
			}
			if err := m.Position.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GravityID", wireType)
			}
			m.GravityID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GravityID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueSourceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UniqueSourceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceType", wireType)
			}
			m.SourceType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceType |= (DataSourceType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeZone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimeZone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DmlMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DmlMsg == nil {
				m.DmlMsg = &DMLMsg{}
			}
			if err := m.DmlMsg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DdlMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DdlMsg == nil {
				m.DdlMsg = &DDLMsg{}
			}
			if err := m.DdlMsg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GravitySentTimestamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GravitySentTimestamp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DMLMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DMLMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DMLMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = make(map[string]*MySQLColumnData)
			}
			var mapkey string
			var mapvalue *MySQLColumnData
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthMessage
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthMessage
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthMessage
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &MySQLColumnData{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMessage(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthMessage
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Data[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Old", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Old == nil {
				m.Old = make(map[string]*MySQLColumnData)
			}
			var mapkey string
			var mapvalue *MySQLColumnData
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthMessage
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthMessage
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthMessage
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &MySQLColumnData{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMessage(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthMessage
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Old[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pks == nil {
				m.Pks = make(map[string]*MySQLColumnData)
			}
			var mapkey string
			var mapvalue *MySQLColumnData
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthMessage
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthMessage
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthMessage
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &MySQLColumnData{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMessage(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthMessage
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Pks[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MongoBsonBytes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MongoBsonBytes == nil {
				m.MongoBsonBytes = make(map[string][]byte)
			}
			var mapkey string
			mapvalue := []byte{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthMessage
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapbyteLen uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapbyteLen |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intMapbyteLen := int(mapbyteLen)
					if intMapbyteLen < 0 {
						return ErrInvalidLengthMessage
					}
					postbytesIndex := iNdEx + intMapbyteLen
					if postbytesIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = make([]byte, mapbyteLen)
					copy(mapvalue, dAtA[iNdEx:postbytesIndex])
					iNdEx = postbytesIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMessage(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthMessage
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.MongoBsonBytes[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DDLMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DDLMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DDLMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SQL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SQL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MySQLColumnValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MySQLColumnValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MySQLColumnValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValueString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsNull", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsNull = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MySQLColumnData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MySQLColumnData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MySQLColumnData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnType", wireType)
			}
			m.ColumnType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ColumnType |= (MySQLColumnType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &MySQLColumnValue{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DefaultValue == nil {
				m.DefaultValue = &MySQLColumnValue{}
			}
			if err := m.DefaultValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMessage(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMessage = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("protocol/msgpb/message.proto", fileDescriptorMessage) }

var fileDescriptorMessage = []byte{
	// 953 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xcd, 0x6e, 0xe3, 0xd4,
	0x17, 0xaf, 0x9b, 0xd8, 0x71, 0x4e, 0x3e, 0x7a, 0xff, 0xa7, 0xfd, 0x4f, 0xad, 0x6a, 0x54, 0x85,
	0x08, 0x50, 0xd4, 0x81, 0x8e, 0x54, 0x60, 0x84, 0x60, 0xe5, 0xd4, 0x9e, 0x2a, 0xc2, 0x1f, 0xed,
	0xb5, 0x0b, 0x0c, 0x9b, 0xca, 0x6d, 0x8c, 0x89, 0xea, 0xd8, 0x21, 0x76, 0x2a, 0x65, 0xc7, 0x92,
	0x47, 0x60, 0xc9, 0x4b, 0xf0, 0x0e, 0x2c, 0x79, 0x04, 0x54, 0xde, 0x80, 0x1d, 0x3b, 0x74, 0xef,
	0xb5, 0x93, 0xb8, 0x13, 0xb1, 0x9a, 0xdd, 0x39, 0xbf, 0xfb, 0x3b, 0xbf, 0xf3, 0x71, 0xcf, 0xb5,
	0xe1, 0xf9, 0x6c, 0x9e, 0xe6, 0xe9, 0x5d, 0x1a, 0xbf, 0x9c, 0x66, 0xd1, 0xec, 0xf6, 0xe5, 0x34,
	0xcc, 0xb2, 0x20, 0x0a, 0x4f, 0x39, 0x8c, 0x32, 0x07, 0xfb, 0xbf, 0x4a, 0xa0, 0x5e, 0xa6, 0xd9,
	0x24, 0x9f, 0xa4, 0x09, 0x1e, 0x03, 0xdc, 0x4e, 0x92, 0x38, 0x8d, 0x5e, 0x4f, 0xe2, 0x50, 0x93,
	0x7a, 0xd2, 0xa0, 0x49, 0x37, 0x10, 0xfc, 0x10, 0xba, 0xc2, 0x2b, 0x23, 0xb4, 0xdd, 0x9e, 0x34,
	0x90, 0xe9, 0x13, 0x14, 0xdf, 0x87, 0x8e, 0x40, 0x2e, 0xfc, 0x91, 0xe1, 0x85, 0xb9, 0x56, 0xe3,
	0x52, 0x55, 0x90, 0xa9, 0x4d, 0xd3, 0x24, 0x4a, 0xfd, 0xc9, 0x34, 0xcc, 0xf2, 0x60, 0x3a, 0xd3,
	0xea, 0x3d, 0x69, 0x50, 0xa3, 0x4f, 0xd0, 0xfe, 0x3f, 0x35, 0xa8, 0xd9, 0x59, 0x84, 0x1a, 0x34,
	0x1e, 0xc2, 0x79, 0xc6, 0xd2, 0x8a, 0xd2, 0x4a, 0x17, 0x8f, 0x40, 0x1d, 0x07, 0x79, 0x70, 0x1b,
	0x64, 0x21, 0xaf, 0xa8, 0x49, 0x57, 0x3e, 0x1e, 0x80, 0x9c, 0x07, 0xb7, 0x71, 0x58, 0xd4, 0x20,
	0x1c, 0x1c, 0x40, 0x63, 0x9a, 0x45, 0xfe, 0x72, 0x16, 0xf2, 0xa4, 0xdd, 0xb3, 0xee, 0x29, 0x9f,
	0xc7, 0xa9, 0x2d, 0x50, 0x5a, 0x1e, 0xe3, 0x73, 0x68, 0xe6, 0xab, 0x02, 0x65, 0x5e, 0xe0, 0x1a,
	0xc0, 0x17, 0xa0, 0xce, 0xca, 0x59, 0x28, 0x3d, 0x69, 0xd0, 0x3a, 0xdb, 0x2b, 0x84, 0xca, 0x61,
	0xd0, 0x15, 0x81, 0x49, 0x45, 0xf3, 0xe0, 0x61, 0x92, 0x2f, 0x47, 0x86, 0xd6, 0xe0, 0x93, 0x5b,
	0x03, 0x78, 0x02, 0x64, 0x91, 0x4c, 0x7e, 0x5c, 0x84, 0x5e, 0xba, 0x98, 0xdf, 0x85, 0x4e, 0x30,
	0x0d, 0x35, 0x95, 0xd7, 0xfc, 0x16, 0x8e, 0x9f, 0x01, 0x64, 0xdc, 0xe3, 0x1d, 0x34, 0x79, 0x07,
	0xff, 0x2f, 0x12, 0x1b, 0x41, 0x1e, 0x78, 0xab, 0x43, 0xba, 0x41, 0x64, 0x73, 0x62, 0xa5, 0x7f,
	0x97, 0x26, 0xa1, 0x06, 0x62, 0x4e, 0xa5, 0x8f, 0x08, 0xf5, 0x1f, 0xd2, 0x2c, 0xd7, 0x5a, 0x1c,
	0xe7, 0x36, 0x7e, 0x00, 0xca, 0x78, 0x1a, 0xdb, 0x59, 0xa4, 0xb5, 0x79, 0x6f, 0x9d, 0x32, 0x85,
	0x6d, 0xd9, 0x59, 0x44, 0x8b, 0x43, 0x4e, 0x1b, 0x73, 0x5a, 0xa7, 0x4a, 0x33, 0x0a, 0x1a, 0x3f,
	0xc4, 0x33, 0x38, 0x28, 0xba, 0xf5, 0xc2, 0x24, 0x5f, 0xdf, 0x7a, 0x97, 0x67, 0xdc, 0x7a, 0xd6,
	0xff, 0xb9, 0x0e, 0x8a, 0xc8, 0x86, 0x2f, 0xa0, 0xce, 0x2e, 0x55, 0xdb, 0xed, 0xd5, 0x06, 0xad,
	0xb3, 0xc3, 0x4a, 0x29, 0xbc, 0x69, 0x33, 0xc9, 0xe7, 0x4b, 0xca, 0x49, 0x38, 0x80, 0x5a, 0x1a,
	0x8f, 0xb5, 0x1a, 0xe7, 0x3e, 0xab, 0x72, 0xdd, 0x78, 0x2c, 0xa8, 0x8c, 0xc2, 0x98, 0xb3, 0xfb,
	0x4c, 0xab, 0x6f, 0x63, 0x5e, 0xde, 0x67, 0x05, 0x73, 0x76, 0x9f, 0xe1, 0xa8, 0xd8, 0xd7, 0x61,
	0x96, 0x26, 0xc3, 0x65, 0x1e, 0x66, 0x9a, 0xcc, 0x83, 0xde, 0xab, 0x06, 0xd9, 0x15, 0x8e, 0x88,
	0x7f, 0x12, 0x78, 0xe4, 0x42, 0x73, 0x55, 0x31, 0x12, 0xa8, 0xdd, 0x87, 0xcb, 0x62, 0xa7, 0x99,
	0x89, 0x1f, 0x81, 0xfc, 0x10, 0xc4, 0x0b, 0xb1, 0xcc, 0xeb, 0xaa, 0xec, 0xa5, 0x77, 0x65, 0x9d,
	0xa7, 0xf1, 0x62, 0x9a, 0xb0, 0x68, 0x2a, 0x48, 0x5f, 0xec, 0x7e, 0x2e, 0x1d, 0x39, 0xa0, 0x96,
	0x6d, 0xbd, 0x2b, 0xbd, 0xb2, 0xf9, 0x77, 0xa2, 0xa7, 0xc3, 0xfe, 0x96, 0xb9, 0x6c, 0x91, 0x3e,
	0xd8, 0x94, 0x6e, 0x6f, 0x48, 0xf4, 0x8f, 0x40, 0x11, 0x0b, 0xc5, 0xa2, 0xbc, 0x2b, 0xab, 0x78,
	0xe9, 0xcc, 0xec, 0x5b, 0x40, 0x36, 0x92, 0x7f, 0xcd, 0x62, 0xb0, 0x07, 0x2d, 0x1e, 0xec, 0xe5,
	0xf3, 0x49, 0x12, 0x15, 0x39, 0x36, 0x21, 0x7c, 0x06, 0xca, 0x24, 0x73, 0x16, 0x71, 0xcc, 0xa5,
	0x54, 0x5a, 0x78, 0xfd, 0xdf, 0x24, 0xd8, 0x7b, 0xd2, 0x0b, 0xbe, 0x02, 0xb8, 0xe3, 0x1e, 0x7f,
	0x71, 0x12, 0x7f, 0x71, 0x5b, 0xfa, 0x16, 0x4f, 0x6e, 0xcd, 0xc4, 0x8f, 0xab, 0xa3, 0x3a, 0x7c,
	0x3b, 0x84, 0x57, 0x5b, 0x34, 0x8a, 0x5f, 0x42, 0x7b, 0x1c, 0x7e, 0x1f, 0x2c, 0xe2, 0x9c, 0xc3,
	0xfc, 0xa3, 0xf5, 0x1f, 0x51, 0x15, 0xf2, 0xc9, 0xdf, 0x12, 0x34, 0x8a, 0xef, 0x17, 0xee, 0x41,
	0xeb, 0xda, 0xf9, 0xca, 0x71, 0xbf, 0x71, 0x6e, 0x6c, 0xef, 0x82, 0xec, 0x20, 0x80, 0x72, 0x4e,
	0x4d, 0xdd, 0x37, 0x89, 0xc4, 0xec, 0xeb, 0x4b, 0x83, 0xd9, 0xbb, 0xcc, 0x36, 0x4c, 0xcb, 0xf4,
	0x4d, 0x52, 0xc3, 0x7d, 0xd8, 0x13, 0x9c, 0x1b, 0x43, 0xf7, 0xf5, 0xa1, 0xee, 0x99, 0xa4, 0x8e,
	0xff, 0x83, 0x8e, 0x41, 0xdd, 0xcb, 0x35, 0x24, 0x23, 0x81, 0x76, 0xc1, 0xf3, 0xf5, 0xa1, 0x65,
	0x12, 0x05, 0xbb, 0x00, 0x9c, 0x24, 0xfc, 0x06, 0x4b, 0xaf, 0x5b, 0xbe, 0x49, 0x0b, 0x40, 0x45,
	0x84, 0xae, 0x4f, 0xaf, 0x9d, 0xf3, 0x75, 0x50, 0x93, 0xc9, 0x50, 0xd3, 0xd1, 0xed, 0x12, 0x81,
	0x0d, 0xe1, 0x91, 0x63, 0x98, 0xdf, 0x92, 0xd6, 0x4a, 0x58, 0xf8, 0x6d, 0x26, 0x7c, 0x61, 0x3a,
	0x26, 0xd5, 0xad, 0x1b, 0xc3, 0xb0, 0x48, 0xe7, 0x24, 0x80, 0x6e, 0xf5, 0x8b, 0x87, 0x87, 0xb0,
	0x5f, 0xb6, 0xce, 0x6a, 0xbe, 0xf1, 0xdc, 0x6b, 0x7a, 0x6e, 0x92, 0x1d, 0x6c, 0x82, 0x6c, 0xbf,
	0xf1, 0xae, 0x2c, 0x22, 0x61, 0x0b, 0x1a, 0xb6, 0xeb, 0x5c, 0xb8, 0xc6, 0x90, 0xec, 0xa2, 0x0a,
	0x75, 0x7f, 0x64, 0x0c, 0x49, 0x8d, 0x31, 0xa8, 0x69, 0x8c, 0x3c, 0x52, 0x67, 0xe6, 0xb9, 0xcb,
	0x4c, 0xf9, 0xe4, 0xa7, 0xea, 0x3e, 0xf0, 0x24, 0x2d, 0x68, 0x14, 0x49, 0x84, 0xf0, 0xc8, 0xf1,
	0x5f, 0x7d, 0x2a, 0x84, 0x5f, 0x5b, 0xae, 0xce, 0x1c, 0x2e, 0x3c, 0x74, 0x5d, 0x4b, 0x08, 0x0f,
	0xdf, 0xf8, 0x26, 0x13, 0x06, 0x50, 0x3c, 0x9f, 0x8e, 0x9c, 0x0b, 0x22, 0x63, 0x07, 0x9a, 0xfe,
	0xc8, 0x36, 0x3d, 0x5f, 0xb7, 0x2f, 0x89, 0x82, 0x6d, 0x50, 0xd9, 0xad, 0x30, 0x88, 0x34, 0xf8,
	0x2d, 0x09, 0x59, 0x75, 0x48, 0x7e, 0x7f, 0x3c, 0x96, 0xfe, 0x78, 0x3c, 0x96, 0xfe, 0x7c, 0x3c,
	0x96, 0x7e, 0xf9, 0xeb, 0x78, 0xe7, 0x56, 0xe1, 0xbf, 0xf1, 0x4f, 0xfe, 0x0d, 0x00, 0x00, 0xff,
	0xff, 0x92, 0x3c, 0x7d, 0x5a, 0xe6, 0x07, 0x00, 0x00,
}
