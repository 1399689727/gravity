// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/moiot/gravity/pkg/worker_pool (interfaces: Scheduler,Job,JobSubmitter,JobAcker)

// Package mock_worker_pool is a generated GoMock package.
package mock_worker_pool

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"

	core "github.com/moiot/gravity/pkg/core"
	worker_pool "github.com/moiot/gravity/pkg/worker_pool"
)

// MockScheduler is a mock of Scheduler interface
type MockScheduler struct {
	ctrl     *gomock.Controller
	recorder *MockSchedulerMockRecorder
}

// MockSchedulerMockRecorder is the mock recorder for MockScheduler
type MockSchedulerMockRecorder struct {
	mock *MockScheduler
}

// NewMockScheduler creates a new mock instance
func NewMockScheduler(ctrl *gomock.Controller) *MockScheduler {
	mock := &MockScheduler{ctrl: ctrl}
	mock.recorder = &MockSchedulerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockScheduler) EXPECT() *MockSchedulerMockRecorder {
	return m.recorder
}

// AckJob mocks base method
func (m *MockScheduler) AckJob(arg0 worker_pool.Job) error {
	ret := m.ctrl.Call(m, "AckJob", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AckJob indicates an expected call of AckJob
func (mr *MockSchedulerMockRecorder) AckJob(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AckJob", reflect.TypeOf((*MockScheduler)(nil).AckJob), arg0)
}

// Close mocks base method
func (m *MockScheduler) Close() {
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockSchedulerMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockScheduler)(nil).Close))
}

// Healthy mocks base method
func (m *MockScheduler) Healthy() bool {
	ret := m.ctrl.Call(m, "Healthy")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Healthy indicates an expected call of Healthy
func (mr *MockSchedulerMockRecorder) Healthy() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Healthy", reflect.TypeOf((*MockScheduler)(nil).Healthy))
}

// Start mocks base method
func (m *MockScheduler) Start() error {
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockSchedulerMockRecorder) Start() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockScheduler)(nil).Start))
}

// SubmitJob mocks base method
func (m *MockScheduler) SubmitJob(arg0 worker_pool.Job) error {
	ret := m.ctrl.Call(m, "SubmitJob", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubmitJob indicates an expected call of SubmitJob
func (mr *MockSchedulerMockRecorder) SubmitJob(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitJob", reflect.TypeOf((*MockScheduler)(nil).SubmitJob), arg0)
}

// MockJob is a mock of Job interface
type MockJob struct {
	ctrl     *gomock.Controller
	recorder *MockJobMockRecorder
}

// MockJobMockRecorder is the mock recorder for MockJob
type MockJobMockRecorder struct {
	mock *MockJob
}

// NewMockJob creates a new mock instance
func NewMockJob(ctrl *gomock.Controller) *MockJob {
	mock := &MockJob{ctrl: ctrl}
	mock.recorder = &MockJobMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockJob) EXPECT() *MockJobMockRecorder {
	return m.recorder
}

// BeforeWindowMoveForward mocks base method
func (m *MockJob) BeforeWindowMoveForward() {
	m.ctrl.Call(m, "BeforeWindowMoveForward")
}

// BeforeWindowMoveForward indicates an expected call of BeforeWindowMoveForward
func (mr *MockJobMockRecorder) BeforeWindowMoveForward() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeforeWindowMoveForward", reflect.TypeOf((*MockJob)(nil).BeforeWindowMoveForward))
}

// EventTime mocks base method
func (m *MockJob) EventTime() time.Time {
	ret := m.ctrl.Call(m, "EventTime")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// EventTime indicates an expected call of EventTime
func (mr *MockJobMockRecorder) EventTime() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventTime", reflect.TypeOf((*MockJob)(nil).EventTime))
}

// Msg mocks base method
func (m *MockJob) Msg() core.Msg {
	ret := m.ctrl.Call(m, "Msg")
	ret0, _ := ret[0].(core.Msg)
	return ret0
}

// Msg indicates an expected call of Msg
func (mr *MockJobMockRecorder) Msg() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Msg", reflect.TypeOf((*MockJob)(nil).Msg))
}

// SequenceNumber mocks base method
func (m *MockJob) SequenceNumber() int64 {
	ret := m.ctrl.Call(m, "SequenceNumber")
	ret0, _ := ret[0].(int64)
	return ret0
}

// SequenceNumber indicates an expected call of SequenceNumber
func (mr *MockJobMockRecorder) SequenceNumber() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SequenceNumber", reflect.TypeOf((*MockJob)(nil).SequenceNumber))
}

// SkipDownStream mocks base method
func (m *MockJob) SkipDownStream() bool {
	ret := m.ctrl.Call(m, "SkipDownStream")
	ret0, _ := ret[0].(bool)
	return ret0
}

// SkipDownStream indicates an expected call of SkipDownStream
func (mr *MockJobMockRecorder) SkipDownStream() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SkipDownStream", reflect.TypeOf((*MockJob)(nil).SkipDownStream))
}

// SlidingWindowKey mocks base method
func (m *MockJob) SlidingWindowKey() string {
	ret := m.ctrl.Call(m, "SlidingWindowKey")
	ret0, _ := ret[0].(string)
	return ret0
}

// SlidingWindowKey indicates an expected call of SlidingWindowKey
func (mr *MockJobMockRecorder) SlidingWindowKey() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SlidingWindowKey", reflect.TypeOf((*MockJob)(nil).SlidingWindowKey))
}

// TableKey mocks base method
func (m *MockJob) TableKey() string {
	ret := m.ctrl.Call(m, "TableKey")
	ret0, _ := ret[0].(string)
	return ret0
}

// TableKey indicates an expected call of TableKey
func (mr *MockJobMockRecorder) TableKey() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TableKey", reflect.TypeOf((*MockJob)(nil).TableKey))
}

// WorkerKey mocks base method
func (m *MockJob) WorkerKey() string {
	ret := m.ctrl.Call(m, "WorkerKey")
	ret0, _ := ret[0].(string)
	return ret0
}

// WorkerKey indicates an expected call of WorkerKey
func (mr *MockJobMockRecorder) WorkerKey() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkerKey", reflect.TypeOf((*MockJob)(nil).WorkerKey))
}

// MockJobSubmitter is a mock of JobSubmitter interface
type MockJobSubmitter struct {
	ctrl     *gomock.Controller
	recorder *MockJobSubmitterMockRecorder
}

// MockJobSubmitterMockRecorder is the mock recorder for MockJobSubmitter
type MockJobSubmitterMockRecorder struct {
	mock *MockJobSubmitter
}

// NewMockJobSubmitter creates a new mock instance
func NewMockJobSubmitter(ctrl *gomock.Controller) *MockJobSubmitter {
	mock := &MockJobSubmitter{ctrl: ctrl}
	mock.recorder = &MockJobSubmitterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockJobSubmitter) EXPECT() *MockJobSubmitterMockRecorder {
	return m.recorder
}

// SubmitJob mocks base method
func (m *MockJobSubmitter) SubmitJob(arg0 worker_pool.Job) error {
	ret := m.ctrl.Call(m, "SubmitJob", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubmitJob indicates an expected call of SubmitJob
func (mr *MockJobSubmitterMockRecorder) SubmitJob(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitJob", reflect.TypeOf((*MockJobSubmitter)(nil).SubmitJob), arg0)
}

// MockJobAcker is a mock of JobAcker interface
type MockJobAcker struct {
	ctrl     *gomock.Controller
	recorder *MockJobAckerMockRecorder
}

// MockJobAckerMockRecorder is the mock recorder for MockJobAcker
type MockJobAckerMockRecorder struct {
	mock *MockJobAcker
}

// NewMockJobAcker creates a new mock instance
func NewMockJobAcker(ctrl *gomock.Controller) *MockJobAcker {
	mock := &MockJobAcker{ctrl: ctrl}
	mock.recorder = &MockJobAckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockJobAcker) EXPECT() *MockJobAckerMockRecorder {
	return m.recorder
}

// AckJob mocks base method
func (m *MockJobAcker) AckJob(arg0 worker_pool.Job) error {
	ret := m.ctrl.Call(m, "AckJob", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AckJob indicates an expected call of AckJob
func (mr *MockJobAckerMockRecorder) AckJob(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AckJob", reflect.TypeOf((*MockJobAcker)(nil).AckJob), arg0)
}
