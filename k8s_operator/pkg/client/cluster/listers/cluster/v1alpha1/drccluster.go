/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/moiot/gravity/k8s_operator/pkg/apis/cluster/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DrcClusterLister helps list DrcClusters.
type DrcClusterLister interface {
	// List lists all DrcClusters in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.DrcCluster, err error)
	// DrcClusters returns an object that can list and get DrcClusters.
	DrcClusters(namespace string) DrcClusterNamespaceLister
	DrcClusterListerExpansion
}

// drcClusterLister implements the DrcClusterLister interface.
type drcClusterLister struct {
	indexer cache.Indexer
}

// NewDrcClusterLister returns a new DrcClusterLister.
func NewDrcClusterLister(indexer cache.Indexer) DrcClusterLister {
	return &drcClusterLister{indexer: indexer}
}

// List lists all DrcClusters in the indexer.
func (s *drcClusterLister) List(selector labels.Selector) (ret []*v1alpha1.DrcCluster, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DrcCluster))
	})
	return ret, err
}

// DrcClusters returns an object that can list and get DrcClusters.
func (s *drcClusterLister) DrcClusters(namespace string) DrcClusterNamespaceLister {
	return drcClusterNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DrcClusterNamespaceLister helps list and get DrcClusters.
type DrcClusterNamespaceLister interface {
	// List lists all DrcClusters in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.DrcCluster, err error)
	// Get retrieves the DrcCluster from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.DrcCluster, error)
	DrcClusterNamespaceListerExpansion
}

// drcClusterNamespaceLister implements the DrcClusterNamespaceLister
// interface.
type drcClusterNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DrcClusters in the indexer for a given namespace.
func (s drcClusterNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DrcCluster, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DrcCluster))
	})
	return ret, err
}

// Get retrieves the DrcCluster from the indexer for a given namespace and name.
func (s drcClusterNamespaceLister) Get(name string) (*v1alpha1.DrcCluster, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("drccluster"), name)
	}
	return obj.(*v1alpha1.DrcCluster), nil
}
