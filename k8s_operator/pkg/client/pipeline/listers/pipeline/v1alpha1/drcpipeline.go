/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/moiot/gravity/k8s_operator/pkg/apis/pipeline/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DrcPipelineLister helps list DrcPipelines.
type DrcPipelineLister interface {
	// List lists all DrcPipelines in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.DrcPipeline, err error)
	// DrcPipelines returns an object that can list and get DrcPipelines.
	DrcPipelines(namespace string) DrcPipelineNamespaceLister
	DrcPipelineListerExpansion
}

// drcPipelineLister implements the DrcPipelineLister interface.
type drcPipelineLister struct {
	indexer cache.Indexer
}

// NewDrcPipelineLister returns a new DrcPipelineLister.
func NewDrcPipelineLister(indexer cache.Indexer) DrcPipelineLister {
	return &drcPipelineLister{indexer: indexer}
}

// List lists all DrcPipelines in the indexer.
func (s *drcPipelineLister) List(selector labels.Selector) (ret []*v1alpha1.DrcPipeline, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DrcPipeline))
	})
	return ret, err
}

// DrcPipelines returns an object that can list and get DrcPipelines.
func (s *drcPipelineLister) DrcPipelines(namespace string) DrcPipelineNamespaceLister {
	return drcPipelineNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DrcPipelineNamespaceLister helps list and get DrcPipelines.
type DrcPipelineNamespaceLister interface {
	// List lists all DrcPipelines in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.DrcPipeline, err error)
	// Get retrieves the DrcPipeline from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.DrcPipeline, error)
	DrcPipelineNamespaceListerExpansion
}

// drcPipelineNamespaceLister implements the DrcPipelineNamespaceLister
// interface.
type drcPipelineNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DrcPipelines in the indexer for a given namespace.
func (s drcPipelineNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DrcPipeline, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DrcPipeline))
	})
	return ret, err
}

// Get retrieves the DrcPipeline from the indexer for a given namespace and name.
func (s drcPipelineNamespaceLister) Get(name string) (*v1alpha1.DrcPipeline, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("drcpipeline"), name)
	}
	return obj.(*v1alpha1.DrcPipeline), nil
}
